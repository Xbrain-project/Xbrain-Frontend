{"ast":null,"code":"var _jsxFileName = \"/Users/napasorn/Desktop/Xbrain-frontend/src/components/paypalcheckoutbutton/index.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { PayPalButtons } from \"@paypal/react-paypal-js\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PaypalCheckoutButton = props => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    product\n  } = props;\n  const [paidFor, setPaidFor] = useState(false);\n  const [error, setError] = useState(null);\n  const handleApprove = orderId => {\n    // Call backend function to fulfill order\n\n    // if response is success\n    setPaidFor(true);\n    // Refresh user's account or subscription status\n\n    // if response is error\n    // setError(\"Your payment was processed successfully. However, we are unable to fulfill your purchase. Please contact us at support@designcode.io for assistance.\")\n  };\n\n  if (paidFor) {\n    // Display success message, modal or redirect user to success page\n    alert(\"Thank you for your purchase!\");\n    navigate('/');\n  }\n  if (error) {\n    // Display error message, modal or redirect user to error page\n    alert(error);\n  }\n  return /*#__PURE__*/_jsxDEV(PayPalButtons, {\n    style: {\n      color: \"white\",\n      layout: \"horizontal\",\n      height: 48,\n      tagline: false,\n      shape: \"rect\",\n      label: 'pay'\n    },\n    onClick: (data, actions) => {\n      // Validate on button click, client or server side\n      const hasAlreadyBoughtCourse = false;\n      if (hasAlreadyBoughtCourse) {\n        setError(\"You already bought this course. Go to your account to view your list of courses.\");\n        return actions.reject();\n      } else {\n        return actions.resolve();\n      }\n    },\n    createOrder: (data, actions) => {\n      return actions.order.create({\n        purchase_units: [{\n          description: product.description,\n          amount: {\n            value: product.price\n          }\n        }]\n      });\n    },\n    onApprove: async (data, actions) => {\n      const order = await actions.order.capture();\n      console.log(\"order\", order);\n      handleApprove(data.orderID);\n    },\n    onCancel: () => {\n      // Display cancel message, modal or redirect user to cancel page or back to cart\n    },\n    onError: err => {\n      setError(err);\n      console.error(\"PayPal Checkout onError\", err);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 11\n  }, this);\n};\n_s(PaypalCheckoutButton, \"WciR32OWatpS1JTIZv2uwvlvNnM=\", false, function () {\n  return [useNavigate];\n});\n_c = PaypalCheckoutButton;\nexport default PaypalCheckoutButton;\nvar _c;\n$RefreshReg$(_c, \"PaypalCheckoutButton\");","map":{"version":3,"names":["useState","PayPalButtons","useNavigate","PaypalCheckoutButton","props","navigate","product","paidFor","setPaidFor","error","setError","handleApprove","orderId","alert","color","layout","height","tagline","shape","label","data","actions","hasAlreadyBoughtCourse","reject","resolve","order","create","purchase_units","description","amount","value","price","capture","console","log","orderID","err"],"sources":["/Users/napasorn/Desktop/Xbrain-frontend/src/components/paypalcheckoutbutton/index.js"],"sourcesContent":["import { useState } from \"react\";\nimport { PayPalButtons } from \"@paypal/react-paypal-js\";\nimport { useNavigate } from \"react-router-dom\";\nconst PaypalCheckoutButton = (props) => {\n    const navigate = useNavigate()\n    const { product } = props;\n\n    const [paidFor, setPaidFor] = useState(false);\n    const [error, setError] = useState(null);\n\n    const handleApprove = (orderId) => {\n        // Call backend function to fulfill order\n    \n        // if response is success\n        setPaidFor(true);\n        // Refresh user's account or subscription status\n    \n        // if response is error\n        // setError(\"Your payment was processed successfully. However, we are unable to fulfill your purchase. Please contact us at support@designcode.io for assistance.\")\n      };\n      if (paidFor) {\n        // Display success message, modal or redirect user to success page\n        alert(\"Thank you for your purchase!\");\n        navigate('/')\n      }\n      if (error) {\n        // Display error message, modal or redirect user to error page\n        alert(error);\n      }\n  \n      return (\n          <PayPalButtons\n          style={{\n            color: \"white\",\n            layout: \"horizontal\",\n            height: 48,\n            tagline: false,\n            shape: \"rect\",\n            label: 'pay'\n        }}\n        onClick={(data, actions) => {\n            // Validate on button click, client or server side\n            const hasAlreadyBoughtCourse = false;\n          \n            if (hasAlreadyBoughtCourse) {\n              setError(\n                \"You already bought this course. Go to your account to view your list of courses.\"\n              );\n          \n              return actions.reject();\n            } else {\n              return actions.resolve();\n            }\n          }}\n        createOrder={(data, actions) => {\n            return actions.order.create({\n              purchase_units: [\n                {\n                  description: product.description,\n                  amount: {\n                    value: product.price\n                  }\n                }\n              ]\n            });\n          }}\n          onApprove={async (data, actions) => {\n            const order = await actions.order.capture(); \n            console.log(\"order\", order);\n          \n            handleApprove(data.orderID);\n          }}\n          onCancel={() => {\n            // Display cancel message, modal or redirect user to cancel page or back to cart\n          }}\n          onError={(err) => {\n            setError(err);\n            console.error(\"PayPal Checkout onError\", err);\n          }}\n          />\n      );\n  };\n  \n  export default PaypalCheckoutButton;"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,aAAa,QAAQ,yBAAyB;AACvD,SAASC,WAAW,QAAQ,kBAAkB;AAAC;AAC/C,MAAMC,oBAAoB,GAAIC,KAAK,IAAK;EAAA;EACpC,MAAMC,QAAQ,GAAGH,WAAW,EAAE;EAC9B,MAAM;IAAEI;EAAQ,CAAC,GAAGF,KAAK;EAEzB,MAAM,CAACG,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMW,aAAa,GAAIC,OAAO,IAAK;IAC/B;;IAEA;IACAJ,UAAU,CAAC,IAAI,CAAC;IAChB;;IAEA;IACA;EACF,CAAC;;EACD,IAAID,OAAO,EAAE;IACX;IACAM,KAAK,CAAC,8BAA8B,CAAC;IACrCR,QAAQ,CAAC,GAAG,CAAC;EACf;EACA,IAAII,KAAK,EAAE;IACT;IACAI,KAAK,CAACJ,KAAK,CAAC;EACd;EAEA,oBACI,QAAC,aAAa;IACd,KAAK,EAAE;MACLK,KAAK,EAAE,OAAO;MACdC,MAAM,EAAE,YAAY;MACpBC,MAAM,EAAE,EAAE;MACVC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE,MAAM;MACbC,KAAK,EAAE;IACX,CAAE;IACF,OAAO,EAAE,CAACC,IAAI,EAAEC,OAAO,KAAK;MACxB;MACA,MAAMC,sBAAsB,GAAG,KAAK;MAEpC,IAAIA,sBAAsB,EAAE;QAC1BZ,QAAQ,CACN,kFAAkF,CACnF;QAED,OAAOW,OAAO,CAACE,MAAM,EAAE;MACzB,CAAC,MAAM;QACL,OAAOF,OAAO,CAACG,OAAO,EAAE;MAC1B;IACF,CAAE;IACJ,WAAW,EAAE,CAACJ,IAAI,EAAEC,OAAO,KAAK;MAC5B,OAAOA,OAAO,CAACI,KAAK,CAACC,MAAM,CAAC;QAC1BC,cAAc,EAAE,CACd;UACEC,WAAW,EAAEtB,OAAO,CAACsB,WAAW;UAChCC,MAAM,EAAE;YACNC,KAAK,EAAExB,OAAO,CAACyB;UACjB;QACF,CAAC;MAEL,CAAC,CAAC;IACJ,CAAE;IACF,SAAS,EAAE,OAAOX,IAAI,EAAEC,OAAO,KAAK;MAClC,MAAMI,KAAK,GAAG,MAAMJ,OAAO,CAACI,KAAK,CAACO,OAAO,EAAE;MAC3CC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAET,KAAK,CAAC;MAE3Bd,aAAa,CAACS,IAAI,CAACe,OAAO,CAAC;IAC7B,CAAE;IACF,QAAQ,EAAE,MAAM;MACd;IACF,CAAE;IACF,OAAO,EAAGC,GAAG,IAAK;MAChB1B,QAAQ,CAAC0B,GAAG,CAAC;MACbH,OAAO,CAACxB,KAAK,CAAC,yBAAyB,EAAE2B,GAAG,CAAC;IAC/C;EAAE;IAAA;IAAA;IAAA;EAAA,QACA;AAEV,CAAC;AAAC,GA9EEjC,oBAAoB;EAAA,QACLD,WAAW;AAAA;AAAA,KAD1BC,oBAAoB;AAgFxB,eAAeA,oBAAoB;AAAC;AAAA"},"metadata":{},"sourceType":"module"}